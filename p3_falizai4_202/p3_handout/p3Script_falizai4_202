Script started on 2024-04-23 19:53:27-04:00
bash-4.4$ uname -a
Linux zeus-1.cec.gmu.edu 4.18.0-348.23.1.el8_5.x86_64 #1 SMP Tue Apr 12 11:20:32 EDT 2022 x86_64 x86_64 x86_64 GNU/Linux
bash-4.4$ ls
driver.py  inc	inputs	Makefile  obj  outputs	p3Script_falizai4_202  silverhand.txt  src
bash-4.4$ cd src
bash-4.4$ cat[K[K[Kls
shell.c
bash-4.4$ cat shell.c
/*#include "fork.h"


int main()
{
	printf("262$");
}
*/
/* Faryal Alizai G01364057
 * CS 262, Lab Section 202
 * P3
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <errno.h>

#define MAX_INPUT_LENGTH 10000
#define MAX_ARGS 128
#define MAX_HISTORY 100

char* history[MAX_HISTORY];
int history_count = 0;

void display_prompt() {
    printf("262$");
    fflush(stdout);
}

void add_history(const char* command) {
    if (history_count >= MAX_HISTORY) {
        free(history[0]);  // Free the oldest entry if history is full
        memmove(history, history + 1, sizeof(char*) * (MAX_HISTORY - 1));  // Shift all entries
        history_count--;
    }
    history[history_count++] = strdup(command);  // Duplicate and store the command
}

void show_history() {
    for (int i = 0; i < history_count; i++) {
        printf("%d: %s\n", i, history[i]);
    }
}

void clear_history() {
    for (int i = 0; i < history_count; i++) {
        free(history[i]);  // Free each history entry
        history[i] = NULL;  // Nullify the pointer after freeing
    }
    history_count = 0;  // Reset history count
}

int parse_input(char* input, char** args) {
    int count = 0;
    char* token = strtok(input, " \t\n");
    while (token != NULL) {
        if (count >= MAX_ARGS) {
            fprintf(stderr, "error: too many arguments\n");
            return -1;
        }
        args[count++] = strdup(token);  // Duplicate and store the token
        token = strtok(NULL, " \t\n");
    }
    args[count] = NULL;
    return count;
}

void free_parsed_args(char** args) {
    int i = 0;
    while (args[i] != NULL) {
        free(args[i]);  // Free each argument
        i++;
    }
}

void execute_command(char** args) {
    if (args[0] == NULL) {
        return;
    }

    if (strcmp(args[0], "exit") == 0) {
        exit(0);
    } else if (strcmp(args[0], "cd") == 0) {
        if (args[1] == NULL || chdir(args[1]) != 0) {
            perror("cd error");
        }
    } else if (strcmp(args[0], "history") == 0) {
        if (args[1] != NULL && strcmp(args[1], "-c") == 0) {
            clear_history();
        } else {
            show_history();
        }
    } else {
        pid_t pid = fork();
        if (pid == 0) {  // Child process
            if (execvp(args[0], args) == -1) {
                fprintf(stderr, "execvp error: %s\n", strerror(errno));
                exit(EXIT_FAILURE);
            }
        } else if (pid < 0) {  // Forking failed
            perror("fork error");
        } else {
            wait(NULL);  // Wait for child process to finish
        }
    }
}

int main() {
    char input[MAX_INPUT_LENGTH];
    char* args[MAX_ARGS + 1];

    while (1) {
        display_prompt();
        if (!fgets(input, sizeof(input), stdin)) {
            break;  // Exit on EOF
        }
        if (input[0] == '\n') {
            continue;  // Skip empty lines
        }
        if (parse_input(input, args) != -1) {
            execute_command(args);
            free_parsed_args(args);
        }
    }

    clear_history();  // Clear history on exit to free all remaining allocated memory
    return 0;
}
bash-4.4$ ls
shell.c
bash-4.4$ cd ..
bash-4.4$ ls
driver.py  inc	inputs	Makefile  obj  outputs	p3Script_falizai4_202  silverhand.txt  src
bash-4.4$ make
gcc -std=gnu99 -Wall -Werror -I./inc -g -c src/shell.c -o obj/shell.o
gcc -std=gnu99 -Wall -Werror -I./inc -g -o cs262sh obj/shell.o obj/fork.o
bash-4.4$ make clean
rm cs262sh
rm ./obj/shell.o
bash-4.4$ ls
driver.py  inc	inputs	Makefile  obj  outputs	p3Script_falizai4_202  silverhand.txt  src
bash-4.4$ make
gcc -std=gnu99 -Wall -Werror -I./inc -g -c src/shell.c -o obj/shell.o
gcc -std=gnu99 -Wall -Werror -I./inc -g -o cs262sh obj/shell.o obj/fork.o
bash-4.4$ ls
cs262sh  driver.py  inc  inputs  Makefile  obj	outputs  p3Script_falizai4_202	silverhand.txt	src
bash-4.4$ ./cs262sh
262$/usr/bin/ech He   o Hello World!
Hello World!
262$/usrt /bin/ls
cs262sh  driver.py  inc  inputs  Makefile  obj	outputs  p3Script_falizai4_202	silverhand.txt	src
262$s /s user/bin/cat/  silverhand.txt
execvp error: No such file or directory
262$/usr/bin/cat silverhand.txt
Huh. You just discovered what it takes to become a legend. Grab your iron. Let's mobilize.
262$historu y
262$hs istory 2
262$history c -c
262$history
262$exit
bash-4.4$ ./cs262sh
262$python3 ./driver.py
['./driver.py']
Calling make
b"make: Nothing to be done for 'all'.\n"
Trying input file: p1-args
Your Output:
262$4 inputs/data/long
262$
============OK!=============
>Trying again with Valgrind:
Your Output:
b"==2012795== Memcheck, a memory error detector\n==2012795== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==2012795== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==2012795== Command: ./cs262sh\n==2012795== \n262$4 inputs/data/long\n262$==2012795== \n==2012795== HEAP SUMMARY:\n==2012795==     in use at exit: 0 bytes in 0 blocks\n==2012795==   total heap usage: 5 allocs, 5 frees, 12,320 bytes allocated\n==2012795== \n==2012795== All heap blocks were freed -- no leaks are possible\n==2012795== \n==2012795== For lists of detected and suppressed errors, rerun with: -s\n==2012795== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"
Trying input file: p1-hello
Your Output:
262$hello
262$
============OK!=============
>Trying again with Valgrind:
Your Output:
b"==2012961== Memcheck, a memory error detector\n==2012961== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==2012961== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==2012961== Command: ./cs262sh\n==2012961== \n262$hello\n262$==2012961== \n==2012961== HEAP SUMMARY:\n==2012961==     in use at exit: 0 bytes in 0 blocks\n==2012961==   total heap usage: 4 allocs, 4 frees, 12,304 bytes allocated\n==2012961== \n==2012961== All heap blocks were freed -- no leaks are possible\n==2012961== \n==2012961== For lists of detected and suppressed errors, rerun with: -s\n==2012961== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"
Trying input file: p1-many-args
Your Output:
262$Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc eget turpis at turpis dapibus rutrum. Vivamus ut sem bibendum, vestibulum lacus eu, fermentum metus. Aenean non ex at nisl sagittis dignissim non mollis tellus. Aenean eget sagittis lorem. Fusce a erat ac nulla ullamcorper luctus ac et lacus. Aenean pharetra eu mauris eget ultrices. Fusce venenatis mauris diam, non placerat mauris vestibulum in. Sed eleifend in turpis vitae mattis. Morbi nec velit eu sapien luctus lobortis. Quisque nec neque ex. Sed lobortis diam id justo viverra aliquet quis non nunc. Duis nunc nunc, viverra eu tellus eget, auctor efficitur felis. Suspendisse quis tincidunt nibh. Praesent vulputate sit amet arcu a luctus. Aliquam ultrices ultricies tempus. Curabitur at malesuada ante, ac rhoncus nunc. Mauris auctor nulla a justo.
262$262$262$
============OK!=============
>Trying again with Valgrind:
Your Output:
b"==2013171== Memcheck, a memory error detector\n==2013171== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==2013171== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==2013171== Command: ./cs262sh\n==2013171== \n262$Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc eget turpis at turpis dapibus rutrum. Vivamus ut sem bibendum, vestibulum lacus eu, fermentum metus. Aenean non ex at nisl sagittis dignissim non mollis tellus. Aenean eget sagittis lorem. Fusce a erat ac nulla ullamcorper luctus ac et lacus. Aenean pharetra eu mauris eget ultrices. Fusce venenatis mauris diam, non placerat mauris vestibulum in. Sed eleifend in turpis vitae mattis. Morbi nec velit eu sapien luctus lobortis. Quisque nec neque ex. Sed lobortis diam id justo viverra aliquet quis non nunc. Duis nunc nunc, viverra eu tellus eget, auctor efficitur felis. Suspendisse quis tincidunt nibh. Praesent vulputate sit amet arcu a luctus. Aliquam ultrices ultricies tempus. Curabitur at malesuada ante, ac rhoncus nunc. Mauris auctor nulla a justo.\n262$262$262$==2013171== \n==2013171== HEAP SUMMARY:\n==2013171==     in use at exit: 0 bytes in 0 blocks\n==2013171==   total heap usage: 130 allocs, 130 frees, 13,118 bytes allocated\n==2013171== \n==2013171== All heap blocks were freed -- no leaks are possible\n==2013171== \n==2013171== For lists of detected and suppressed errors, rerun with: -s\n==2013171== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"
Trying input file: p1-prompt
Your Output:
262$262$262$
============OK!=============
>Trying again with Valgrind:
Your Output:
b"==2013299== Memcheck, a memory error detector\n==2013299== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==2013299== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==2013299== Command: ./cs262sh\n==2013299== \n262$262$262$==2013299== \n==2013299== HEAP SUMMARY:\n==2013299==     in use at exit: 0 bytes in 0 blocks\n==2013299==   total heap usage: 2 allocs, 2 frees, 12,288 bytes allocated\n==2013299== \n==2013299== All heap blocks were freed -- no leaks are possible\n==2013299== \n==2013299== For lists of detected and suppressed errors, rerun with: -s\n==2013299== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"
Trying input file: p2-cd
Your Output:
262$262$a
b
c
d
e
long
262$
============OK!=============
>Trying again with Valgrind:
Your Output:
b"==2013386== Memcheck, a memory error detector\n==2013386== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==2013386== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==2013386== Command: ./cs262sh\n==2013386== \n262$262$a\nb\nc\nd\ne\nlong\n262$==2013386== \n==2013386== HEAP SUMMARY:\n==2013386==     in use at exit: 0 bytes in 0 blocks\n==2013386==   total heap usage: 5 allocs, 5 frees, 12,311 bytes allocated\n==2013386== \n==2013386== All heap blocks were freed -- no leaks are possible\n==2013386== \n==2013386== For lists of detected and suppressed errors, rerun with: -s\n==2013386== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"
Trying input file: p2-exit
Your Output:
262$
============OK!=============
>Trying again with Valgrind:
Your Output:
b"==2013514== Memcheck, a memory error detector\n==2013514== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==2013514== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==2013514== Command: ./cs262sh\n==2013514== \n262$==2013514== \n==2013514== HEAP SUMMARY:\n==2013514==     in use at exit: 5 bytes in 1 blocks\n==2013514==   total heap usage: 3 allocs, 2 frees, 12,293 bytes allocated\n==2013514== \n==2013514== LEAK SUMMARY:\n==2013514==    definitely lost: 0 bytes in 0 blocks\n==2013514==    indirectly lost: 0 bytes in 0 blocks\n==2013514==      possibly lost: 0 bytes in 0 blocks\n==2013514==    still reachable: 5 bytes in 1 blocks\n==2013514==         suppressed: 0 bytes in 0 blocks\n==2013514== Reachable blocks (those to which a pointer was found) are not shown.\n==2013514== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==2013514== \n==2013514== For lists of detected and suppressed errors, rerun with: -s\n==2013514== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"
===========>>>>>ERROR, MEMORY LEAK!<<<<<=============
Trying input file: p2-history
Your Output:
262$a
b
c
d
e
long
262$a
262$262$
============>>>>>ERROR Expected output was!<<<<<<=============
262$a
b
c
d
e
long
262$a
262$0: /bin/ls inputs/data
1: /bin/cat inputs/data/a
262$
>Trying again with Valgrind:
Your Output:
b"==2013646== Memcheck, a memory error detector\n==2013646== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==2013646== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==2013646== Command: ./cs262sh\n==2013646== \n262$a\nb\nc\nd\ne\nlong\n262$a\n262$262$==2013646== \n==2013646== HEAP SUMMARY:\n==2013646==     in use at exit: 0 bytes in 0 blocks\n==2013646==   total heap usage: 7 allocs, 7 frees, 12,339 bytes allocated\n==2013646== \n==2013646== All heap blocks were freed -- no leaks are possible\n==2013646== \n==2013646== For lists of detected and suppressed errors, rerun with: -s\n==2013646== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"
Trying input file: p2-history-clear
Your Output:
262$a
262$one
262$262$262$262$two
262$262$262$
============>>>>>ERROR Expected output was!<<<<<<=============
262$a
262$one
262$0: /bin/cat inputs/data/a
1: /bin/echo one
262$262$262$two
262$0: /bin/echo two
262$0: /bin/echo two
262$
>Trying again with Valgrind:
Your Output:
b"==2013744== Memcheck, a memory error detector\n==2013744== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==2013744== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==2013744== Command: ./cs262sh\n==2013744== \n262$a\n262$one\n262$262$262$262$two\n262$262$262$==2013744== \n==2013744== HEAP SUMMARY:\n==2013744==     in use at exit: 0 bytes in 0 blocks\n==2013744==   total heap usage: 14 allocs, 14 frees, 12,382 bytes allocated\n==2013744== \n==2013744== All heap blocks were freed -- no leaks are possible\n==2013744== \n==2013744== For lists of detected and suppressed errors, rerun with: -s\n==2013744== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"
{"scores": {"compiles": 2, "p1-args": 2, "p1-hello": 2, "p1-many-args": 2, "p1-prompt": 2, "p2-cd": 2, "p2-exit": 1, "p2-history": 0, "p2-history-clear": 0}}
rm cs262sh
rm ./obj/shell.o
Terminated
bash-4.4$ ls
driver.py  inc	inputs	Makefile  obj  outputs	p3Script_falizai4_202  silverhand.txt  src
bash-4.4$ exit
exit

Script done on 2024-04-23 19:55:58-04:00
